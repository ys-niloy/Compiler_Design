#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <bits/stdc++.h>

using namespace std;

string printValue;
vector<string> invalidVariables;


bool isKeyword(const string &token)
{
    // taking input from the file
    string filename = "keywords.txt";
    ifstream inputFile(filename);
    if (!inputFile.is_open())
    {
        cout << "Error: Unable to open the file." << endl;
        return 1;
    }
    // end of input

    // storing the keywords
    string input;
    vector<string> keys;
    while (inputFile >> input)
    {
        keys.push_back(input);
    }

    string temp; // string to accumulate characters

    for (char c : token)
    {
        if (!isalnum(c))
        {
            break; // Stop when an opening bracket is found
        }
        temp += c; // Append the character to the temp string
    }

    bool flag = false;

    // Check if temp is one of the predefined keywords
    for (const string &key : keys)
    {
        if (temp == key)
        {
            flag = true;
            printValue = temp;
            break;
        }
    }

    // flag will be true if temp is one of the keywords
    return flag;
}

// function to
void storeInvalid(const string &invalid)
{
    invalidVariables.push_back(invalid);
}

bool isVariable(string &token)
{
    // Check if the token is a valid C++ variable name
    if (!token.empty() && (isalpha(token[0]) || token[0] == '_'))
    {
        // Check if the rest of the token contains valid characters
        for (int i = 1; i < token.size(); i++)
        {
            if (token[i] == ';')
            {
                token.erase(i, 1);
                i--;
            }

            if (!isalnum(token[i]) && token[i] != '_' && token[i] != ';')
            {
                storeInvalid(token);
                return false;
            }
        }
        printValue = token;
        return true;
    }
    return false;
}



bool isFunction(const string &token)
{
    // Check if the token is a valid C++ variable name
    int length = token.size();
    string checkWord;
        // Check if the rest of the token contains valid characters
        for (int i = 1; i < token.size(); i++)
        {
            checkWord += token[i]; // append the string until '(' is found
            if (token[i] == '(' && (token[length -1] == ')' ))
            {
                break;
            }
        }
        if(isVariable(checkWord))
        {
            printValue = checkWord;
        }

    return false;
}

// bool isPunctuation(const string &token)
// {
//     return token.size() == 1 && string(".,;!?()").find(token) != string::npos;
// }

int main()
{
    // opening the file
    ifstream inputFile("input.txt");
    if (!inputFile.is_open())
    {
        cout << "Error: Unable to open the file." << endl;
        return 1;
    }
    // end of taking input

    // vectors to store the keywords
    vector<string> keywords;
    vector<string> variables;
    vector<string> functions;
    string prev;





    // storing the lines
    vector<string> tokens;
    string token;
    while (inputFile >> token)
    {
        tokens.push_back(token);
    }



    for (size_t i = 0; i < tokens.size(); ++i)
    {
        prev = tokens[i-1];
        string classification;
        if (isKeyword(tokens[i]))
        {
            classification = "Keyword";
            keywords.push_back(printValue);
        }
        else if ((prev == "int" || prev == "float" || prev == "double" || prev == "char" || prev == "string") && isVariable(tokens[i]))
        {
            classification = "Variable";
            variables.push_back(printValue);
        }
        else
        {
            printValue.clear();
            classification = "Unknown";
        }
        // else if (isPunctuation(token))
        // {
        //     classification = "Punctuation";
        // }
        // else if (isFunction(token))
        // {
        //     classification = "Function";
        // }

        // cout << "Token: " << printValue << " is a " << classification << endl;
        // cout << token << endl;
    }
    inputFile.close();


    // opening the file separately for identifying the valid functions
    ifstream functionInputFile("input.txt");
    if (!functionInputFile.is_open())
    {
        cout << "Error: Unable to open the file." << endl;
        return 1;
    }

    string line;
    while (getline(functionInputFile, line))
    {
        if (isFunction(line))
        {
            functions.push_back(printValue);
        }

        //cout << line << endl;
    }
    functionInputFile.close();





    cout << "The keywords in the text file are: " << endl;

    for (int i = 0; i < keywords.size(); i++)
    {
        cout << keywords[i] << endl;
    }

    cout << endl << "______________________" << endl;
    cout << "The variables in the text file are: " << endl;
    for (int i = 0; i < variables.size(); i++)
    {
        cout << variables[i] << endl;
    }

    cout << endl << "______________________" << endl;
    cout << "The functions in the text file are: " << endl;
    for (int i = 0; i < functions.size(); i++)
    {
        cout << functions[i] << endl;
    }

    cout << endl << "______________________" << endl;
    cout << "The invalid identifiers in the text file are: " << endl;
    for (int i = 0; i < invalidVariables.size(); i++)
    {
        cout << invalidVariables[i] << endl;
    }






    return 0;
}
